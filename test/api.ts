/* tslint:disable */
/* eslint-disable */
/**
 * Swagger Petstore
 * A sample API that uses a petstore as an example to demonstrate features in the swagger-2.0 specification
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ErrorModel
 */
export interface ErrorModel {
    /**
     * 
     * @type {number}
     * @memberof ErrorModel
     */
    'code': number;
    /**
     * 
     * @type {string}
     * @memberof ErrorModel
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface NewPet
 */
export interface NewPet {
    /**
     * 
     * @type {string}
     * @memberof NewPet
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof NewPet
     */
    'tag'?: string;
}
/**
 * 
 * @export
 * @interface Pet
 */
export interface Pet {
    /**
     * 
     * @type {string}
     * @memberof Pet
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Pet
     */
    'tag'?: string;
    /**
     * 
     * @type {number}
     * @memberof Pet
     */
    'id': number;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new pet in the store.  Duplicates are allowed
         * @param {NewPet} pet Pet to add to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPet: async (pet: NewPet, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pet' is not null or undefined
            assertParamExists('addPet', 'pet', pet)
            const localVarPath = `/pets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pet, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * deletes a single pet based on the ID supplied
         * @param {number} id ID of pet to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePet', 'id', id)
            const localVarPath = `/pets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a user based on a single ID, if the user does not have access to the pet
         * @param {number} id ID of pet to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findPetById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('findPetById', 'id', id)
            const localVarPath = `/pets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all pets from the system that the user has access to
         * @param {Array<string>} [tags] tags to filter by
         * @param {number} [limit] maximum number of results to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findPets: async (tags?: Array<string>, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/pets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tags) {
                localVarQueryParameter['tags'] = tags.join(COLLECTION_FORMATS.csv);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new pet in the store.  Duplicates are allowed
         * @param {NewPet} pet Pet to add to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addPet(pet: NewPet, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addPet(pet, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * deletes a single pet based on the ID supplied
         * @param {number} id ID of pet to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a user based on a single ID, if the user does not have access to the pet
         * @param {number} id ID of pet to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findPetById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findPetById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all pets from the system that the user has access to
         * @param {Array<string>} [tags] tags to filter by
         * @param {number} [limit] maximum number of results to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findPets(tags?: Array<string>, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Pet>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findPets(tags, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Creates a new pet in the store.  Duplicates are allowed
         * @param {NewPet} pet Pet to add to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPet(pet: NewPet, options?: any): AxiosPromise<Pet> {
            return localVarFp.addPet(pet, options).then((request) => request(axios, basePath));
        },
        /**
         * deletes a single pet based on the ID supplied
         * @param {number} id ID of pet to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePet(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deletePet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a user based on a single ID, if the user does not have access to the pet
         * @param {number} id ID of pet to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findPetById(id: number, options?: any): AxiosPromise<Pet> {
            return localVarFp.findPetById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all pets from the system that the user has access to
         * @param {Array<string>} [tags] tags to filter by
         * @param {number} [limit] maximum number of results to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findPets(tags?: Array<string>, limit?: number, options?: any): AxiosPromise<Array<Pet>> {
            return localVarFp.findPets(tags, limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Creates a new pet in the store.  Duplicates are allowed
     * @param {NewPet} pet Pet to add to the store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addPet(pet: NewPet, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addPet(pet, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * deletes a single pet based on the ID supplied
     * @param {number} id ID of pet to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deletePet(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deletePet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a user based on a single ID, if the user does not have access to the pet
     * @param {number} id ID of pet to fetch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public findPetById(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).findPetById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all pets from the system that the user has access to
     * @param {Array<string>} [tags] tags to filter by
     * @param {number} [limit] maximum number of results to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public findPets(tags?: Array<string>, limit?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).findPets(tags, limit, options).then((request) => request(this.axios, this.basePath));
    }
}



